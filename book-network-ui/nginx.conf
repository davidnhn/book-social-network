events {}

http {
   server {
    listen 80;

    location / {
    root /usr/share/nginx/html;
    index index.html; # Définit le fichier index à servir si aucun fichier spécifique n'est demandé
    try_files $uri $uri/ /index.html;
        # Cas 1 : L'utilisateur tape http://localhost/home , $uri = home
        # $uri : Nginx va d'abord vérifier si un fichier /home existe dans le répertoire /usr/share/nginx/html. Probablement, il n'existe pas.
        # $uri/ : Ensuite, Nginx va vérifier si un répertoire /home/ existe dans le même répertoire. Probablement, il n'existe pas.
        # /index.html : Finalement, Nginx sert le fichier index.html. Le routeur Angular prendra ensuite en charge la requête et affichera la page /home.

    }

    # Handle Javascript | CSS files with the correct MIME type
    location ~ \.(js|css)$ {
      root /usr/share/nginx/html;
      include /etc/nginx/mime.types;   # include /etc/nginx/mime.types; : Cette ligne inclut le fichier de configuration des types MIME. Les types MIME (Multipurpose Internet Mail Extensions) indiquent le type de contenu des fichiers. Par exemple, un fichier CSS doit être servi avec le type MIME "text/css", et un fichier JavaScript avec "application/javascript".

    }

    # Catch-all location to handle refreshes on any route
    location ~ ^/.+$ {
      root /usr/share/nginx/html;
      index index.html;
      try_files $uri / /index.html;
   }
#  C:\Users\david\Documents\spring-boot\ali-bouali\book-social-network\book-network-ui> docker build -t bsn/bsn-ui:1.0.0 -f ../docker/frontend/Dockerfile .
  }
}

# La regex \.(js|css)$
# ~ : Ce symbole indique que la ligne suivante est une expression régulière (regex) qui sera utilisée pour faire correspondre les URI des requêtes.
# \. : Le backslash (\) est un caractère d'échappement, et le point (.) signifie littéralement un point. Donc, \. correspond à un point dans le nom de fichier.
# (js|css) : Les parenthèses sont utilisées pour grouper les alternatives. js|css signifie "js" ou "css". Donc, cette partie de la regex correspond à soit "js" soit "css".
# $ : Le signe dollar ($) signifie la fin de la chaîne. Donc, la regex entière \.(js|css)$ correspond à toute chaîne se terminant par ".js" ou ".css".



# Un type MIME (Multipurpose Internet Mail Extensions) indique au client (généralement un navigateur web) le type de contenu du fichier envoyé par le serveur. Cela permet au client de savoir comment traiter le fichier reçu.
# Exemple pratique
# Imaginons que le client (navigateur) fait une requête pour un fichier CSS :

# Requête du client :
# Le client envoie une requête HTTP pour un fichier CSS : GET /styles/main.css HTTP/1.1.

# Traitement par Nginx :
# Nginx utilise la configuration de la directive location pour déterminer où se trouve le fichier demandé.
# Grâce à la ligne include /etc/nginx/mime.types;, Nginx sait que les fichiers avec l'extension .css ont le type MIME text/css.

# Réponse de Nginx :
# Nginx inclut le type MIME dans l'en-tête de la réponse HTTP :
# HTTP/1.1 200 OK
# Content-Type: text/css
# Ensuite, Nginx envoie le contenu du fichier CSS dans le corps de la réponse.

# Traitement par le client :
# Le navigateur reçoit la réponse avec le fichier CSS et le type MIME text/css.
# Le navigateur sait qu'il doit traiter le contenu reçu comme du CSS, ce qui lui permet de l'appliquer correctement aux éléments HTML.
